{"version":3,"sources":["components/Navbar.jsx","components/Card.jsx","components/CardContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["style","nav","backgroundColor","boxShadow","restartButton","fontFamily","h1","fontSize","fontWeight","Navbar","react_default","a","createElement","className","href","target","width","Card","props","onClick","handleClick","id","src","alt","img","row","display","score","pipe","color","message","CardContainer","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","images","clickedImages","high_score","framework","shuffle","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","item","filter","image","includes","setState","push","inherits","createClass","key","value","_this2","container","map","components_Card","name","clicked","Component","App","components_Navbar","components_CardContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f97f4d08.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst style = {\r\n  nav: {\r\n    backgroundColor: \"#e6c400\",\r\n    boxShadow: \"0px 2px 25px 1px rgba(0,0,0,0.45)\"\r\n\r\n  },\r\n  restartButton: {\r\n    fontFamily: \"sSharp\"\r\n  },\r\n  h1: {\r\n    fontFamily: \"sSharp\",\r\n    fontSize: \"100px\",\r\n    fontWeight: 500\r\n\r\n  }\r\n\r\n}\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-light\" style={style.nav}>\r\n        {/* <button className=\"btn btn-secondary\" style={style.restartButton}>Restart</button> */}\r\n        <span style={style.h1}>Z-O-LITE</span>\r\n        <span>Click the images to get points but clicking an image twice will reset.</span>\r\n        <p><span><a href=\"https://www.explainthatstuff.com/zeolites.html\" target=\"_blank\">Click here to learn more!</a></span></p>\r\n\r\n      </nav>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react'\r\n\r\nconst style = {\r\n  width: \"10rem\",\r\n  backgroundColor: \"#ddd\"\r\n\r\n}\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className=\"card\" style={style} onClick={() => props.handleClick(props.id)}>\r\n      <img className=\"card-img-top\" src={props.src} alt={props.img}/>\r\n    </div>        \r\n  )\r\n}\r\n\r\nexport default Card\r\n","import React, { Component } from 'react'\r\nimport Card from \"./Card.jsx\";\r\nimport images from \"../zeoImg.json\";\r\n\r\nconst style= {\r\n  row:{\r\n    display: \"flex\"\r\n  },\r\n  score:{\r\n    fontFamily: \"sSharp\",\r\n    fontSize: \"2rem\"\r\n  },\r\n  pipe:{\r\n    color: \"#e6c400\",\r\n    fontSize: \"3rem\"\r\n  },\r\n  message: {\r\n    fontFamily: \"sSharp\",\r\n    fontSize: \"2.5rem\"\r\n  }\r\n  \r\n}\r\n\r\nexport class CardContainer extends Component {\r\n  state = {\r\n    images: images,\r\n    clickedImages: [],\r\n    score: 0,\r\n    high_score: 0,\r\n    message: \"\",\r\n    href: \"#\",\r\n    framework: \"\"\r\n  }\r\n\r\n  //See Fisher-Yates shuffle in action! https://bost.ocks.org/mike/shuffle/\r\n  shuffle = (array) => {\r\n    let currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  handleClick = (id) => {\r\n    let clickedImages = this.state.clickedImages;\r\n    let item = images.filter(image => id === image.id);\r\n\r\n\r\n    if(this.state.clickedImages.includes(item[0].img)){\r\n      this.setState({images: images});\r\n      this.setState({clickedImages: []});\r\n      if(this.state.score > this.state.high_score){\r\n        this.setState({high_score: this.state.score})\r\n      }\r\n      this.setState({score: 0 });\r\n      this.setState({message: \"RESET\"});\r\n    }\r\n    else {\r\n      clickedImages.push(item[0].img);\r\n      this.setState({clickedImages: clickedImages});\r\n      this.setState({score: this.state.score + 1 });\r\n      this.setState({images: this.shuffle(images)})\r\n      this.setState({message: \"CORRECT\"});\r\n      this.setState({framework: item[0].img})\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\" style={style.container}>\r\n        <div>\r\n          <span style={style.score}>\r\n            Score: {this.state.score} <span style={style.pipe}>|</span> High Score: {this.state.high_score}\r\n          </span>\r\n        </div>\r\n        <div>\r\n          <p style={style.message}>{this.state.message}</p>\r\n          <p>Framework: {this.state.framework}</p>\r\n        </div>\r\n        <div className=\"row\" style={style.row}>\r\n          {images.map(image => \r\n          <Card className=\"col-3\"\r\n            id={image.id} \r\n            key={image.id} \r\n            src={image.src} \r\n            name={image.img} \r\n            clicked={image.clicked}\r\n            handleClick={this.handleClick}\r\n          />)}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CardContainer\r\n","import React from 'react';\nimport Navbar from \"./components/Navbar.jsx\";\nimport CardContainer from \"./components/CardContainer.jsx\"\n\nfunction App() {\n  return (\n    <div>\n      <Navbar/>\n      <CardContainer/>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}